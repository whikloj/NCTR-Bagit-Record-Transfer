# Generated by Django 3.2.11 on 2023-01-30 15:56
from django.contrib.auth.management import create_permissions
from django.contrib.auth.models import Group, Permission
from django.core.management.sql import emit_post_migrate_signal
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields

from caais.models import SourceType, SourceRole, ExtentType, RightsType


def populate_initial_terms(apps, schema_editor):
    other_type, created = SourceType.objects.get_or_create(
        name='Other',
        description='Placeholder right to allow user to specify unique source type'
    )
    if created:
        other_type.save()

    other_role, created = SourceRole.objects.get_or_create(
        name='Other',
        description='Placeholder right to allow user to specify unique source role'
    )
    if created:
        other_role.save()


def populate_extents(apps, schema_editor):
    ''' Add a few extent type terms to database '''

    for name, description in (
            ('Extent received', 'Extent of material as it was received'),
            ('Extent retained', 'Extent of retained material'),
            ('Extent removed', 'Extent of removed material'),
        ):
        extent_type, _ = ExtentType.objects.get_or_create(
            name=name,
            description=description,
        )


def populate_rights_types(apps, schema_editor):
    ''' Add a few rights type terms to database '''

    for name, description in (
            ('Other', 'A type of rights not listed elsewhere'),
            ('Unknown', 'Use when it is not known what type of rights pertain to the material'),
            ('Cultural Rights', 'Accss to material is limited according to cultural protocols'),
            ('Statute', 'Access to material is limited according to law or legislation'),
            ('License', 'Access to material is limited by a licensing agreement'),
            ('Access', 'Access to material is restricted to a certain entity or group of entities'),
            ('Copyright', 'Access to material is based on fair dealing OR material is in the public domain'),
        ):
        rights_type, _ = RightsType.objects.get_or_create(
            name=name,
            description=description,
        )


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DateOfCreationOrRevisionType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Record the action type in accordance with a controlled vocabulary maintained by the repository.', max_length=128)),
                ('description', models.TextField(blank=True, default='')),
            ],
            options={
                'verbose_name': 'Date of Creation or Revision Type',
                'verbose_name_plural': 'Date of Creation or Revision Types',
            },
        ),
        migrations.CreateModel(
            name='EventType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Record the event type in accordance with a controlled vocabulary maintained by the repository', max_length=128)),
                ('description', models.TextField(blank=True, default='')),
            ],
            options={
                'verbose_name': 'Event Type',
                'verbose_name_plural': 'Event Types',
            },
        ),
        migrations.CreateModel(
            name='ExtentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Record the extent statement type in accordance with a controlled vocabulary maintained by the repository', max_length=128)),
                ('description', models.TextField(blank=True, default='')),
            ],
            options={
                'verbose_name': 'Extent type',
                'verbose_name_plural': 'Extent types',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MaterialAssessmentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Record the material assessment statement type in accordance with a controlled vocabulary maintained by the repository.', max_length=128)),
                ('description', models.TextField(blank=True, default='')),
            ],
            options={
                'verbose_name': 'Material Assessment Type',
                'verbose_name_plural': 'Material Assessment Types',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Metadata',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('repository', models.CharField(help_text="Give the authorized form(s) of the name of the institution in accordance with the repository's naming standard", max_length=128, null=True)),
                ('accession_title', models.CharField(help_text="Supply an accession title in accordance with the repository's descriptive standard, typically consisting of the creator's name(s) and the type of material", max_length=128, null=True)),
                ('acquisition_method', models.CharField(help_text='Record the acquisition method in accordance with a controlled vocabulary', max_length=128, null=True)),
                ('disposition_authority', models.TextField(help_text='Record information about any legal instruments that apply to the accessioned material. Legal instruments include statutes, records schedules or disposition authorities, and donor agreements', null=True)),
                ('custodial_history', models.TextField(help_text="Provide relevant custodial history information in accordance with the repository's descriptive standard. Record the successive transfers of ownership, responsibility and/or custody of the accessioned material prior to its transfer to the repository", null=True)),
                ('date_of_material', models.CharField(help_text='Provide a preliminary estimate of the date range or explicitly indicate if not it has yet been determined', max_length=128, null=True)),
                ('scope_and_content', models.TextField(help_text='Record a summary that includes: functions and activities that resulted in the materialâ€™s generation, dates, the geographic area to which the material pertains, subject matter, arrangement, classification, and documentary forms. This is recorded as a free text statement.', null=True)),
                ('rules_or_conventions', models.CharField(blank=True, default='', help_text='Record information about the standards, rules or conventions that were followed when creating or maintaining the accession record. Indicate the software application if the accession record is based on a data entry template in a database or other automated system. Give the version number of the standard or software application where applicable.', max_length=255)),
                ('level_of_detail', models.CharField(choices=[('NS', 'Not Specified'), ('ML', 'Minimal'), ('PL', 'Partial'), ('FL', 'Full')], default='NS', help_text='Record the level of detail in accordance with a controlled vocabulary maintained by the repository.', max_length=2)),
                ('language_of_record', models.CharField(blank=True, default='en', help_text='Record the language(s) and script(s) used to create the accession record. If the content has been translated and is available in other languages, give those languages. Provide information about script only where it is common to use multiple scripts to represent a language and it is important to know which script is employed.', max_length=20)),
            ],
            options={
                'verbose_name': 'CAAIS metadata',
                'verbose_name_plural': 'CAAIS metadata',
            },
        ),
        migrations.CreateModel(
            name='RightsType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Record the rights statement type in accordance with a controlled vocabulary maintained by the repository', max_length=128)),
                ('description', models.TextField(blank=True, default='')),
            ],
            options={
                'verbose_name': 'Rights',
                'verbose_name_plural': 'Rights types',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SourceConfidentiality',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Record source statements or source information that is for internal use only by the repository. Repositories should develop a controlled vocabulary with terms that can be translated into clear rules for handling source information', max_length=128)),
                ('description', models.TextField(blank=True, default='')),
            ],
            options={
                'verbose_name': 'Source confidentiality',
                'verbose_name_plural': 'Source confidentialities',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SourceRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Record the source role (when known) in accordance with a controlled vocabulary maintained by the repository', max_length=128)),
                ('description', models.TextField(blank=True, default='')),
            ],
            options={
                'verbose_name': 'Source role',
                'verbose_name_plural': 'Source roles',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SourceType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Record the source in accordance with a controlled vocabulary maintained by the repository', max_length=128)),
                ('description', models.TextField(blank=True, default='')),
            ],
            options={
                'verbose_name': 'Source type',
                'verbose_name_plural': 'Source types',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Record the current position of the material with respect to the repository's workflows and business processes using a controlled vocabulary", max_length=128)),
                ('description', models.TextField(blank=True, default='')),
            ],
            options={
                'verbose_name': 'Accession status',
                'verbose_name_plural': 'Accession statuses',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TitleChoices',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('description', models.TextField(blank=True, default='')),
            ],
            options={
                'verbose_name': 'Accession Title',
                'verbose_name_plural': 'Accession Titles',
            },
        ),
        migrations.CreateModel(
            name='StorageLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('storage_location', models.TextField(help_text='Record the physical and/or digital location(s) within the repository in which the accessioned material is stored')),
                ('metadata', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='storage_locations', to='caais.metadata')),
            ],
            options={
                'verbose_name': 'Storage location',
                'verbose_name_plural': 'Storage locations',
            },
        ),
        migrations.CreateModel(
            name='SourceOfMaterial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_name', models.CharField(default='', help_text="Record the source name in accordance with the repository's descriptive standard", max_length=256)),
                ('contact_name', models.CharField(blank=True, default='', max_length=256)),
                ('job_title', models.CharField(blank=True, default='', max_length=256)),
                ('phone_number', models.CharField(max_length=32)),
                ('email_address', models.CharField(max_length=256)),
                ('address_line_1', models.CharField(blank=True, default='', max_length=256)),
                ('address_line_2', models.CharField(blank=True, default='', max_length=256)),
                ('city', models.CharField(blank=True, default='', max_length=128)),
                ('region', models.CharField(blank=True, default='', max_length=128)),
                ('postal_or_zip_code', models.CharField(blank=True, default='', max_length=16)),
                ('country', django_countries.fields.CountryField(max_length=2, null=True)),
                ('source_note', models.TextField(blank=True, default='', help_text='Record any other information about the source of the accessioned materials. If the source performed the role for only a specific period of time (e.g. was a custodian for several years), record the dates in this element')),
                ('metadata', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='source_of_materials', to='caais.metadata')),
                ('source_confidentiality', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='source_of_materials', to='caais.sourceconfidentiality')),
                ('source_role', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='source_of_materials', to='caais.sourcerole')),
                ('source_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='source_of_materials', to='caais.sourcetype')),
            ],
            options={
                'verbose_name': 'Source of material',
                'verbose_name_plural': 'Sources of material',
            },
        ),
        migrations.CreateModel(
            name='Rights',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rights_value', models.TextField(blank=True, default='', help_text='Record the nature and duration of the permission granted or restriction imposed. Specify where the condition applies only to part of the accession')),
                ('rights_note', models.TextField(blank=True, default='', help_text='Record any other information relevant to describing the rights statement')),
                ('metadata', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rights', to='caais.metadata')),
                ('rights_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rights_type', to='caais.rightstype')),
            ],
            options={
                'verbose_name': 'Rights',
                'verbose_name_plural': 'Rights',
            },
        ),
        migrations.CreateModel(
            name='MaterialAssessmentStatement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assessment_value', models.TextField(blank=True, default='', help_text='Record information about the assessment of the material with respect to its physical condition, dependencies, processing or access.')),
                ('assessment_plan', models.TextField(blank=True, default='', help_text='Record the planned response to each of the physical requirements for preservation and access to the material.')),
                ('assessment_note', models.TextField(blank=True, default='', help_text='Record any other information relevant to the long-term preservation of the material.')),
                ('assessment_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='material_assessment_types', to='caais.materialassessmenttype')),
                ('metadata', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='material_assessments', to='caais.metadata')),
            ],
            options={
                'verbose_name': 'Material Assessment Statement',
                'verbose_name_plural': 'Material Assessment Statements',
            },
        ),
        migrations.CreateModel(
            name='LanguageOfMaterial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_of_material', models.CharField(help_text='Record, at a minimum, the language that is predominantly found in the accessioned material', max_length=128)),
                ('metadata', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='language_of_materials', to='caais.metadata')),
            ],
            options={
                'verbose_name': 'Language of material',
                'verbose_name_plural': 'Language of materials',
            },
        ),
        migrations.CreateModel(
            name='Identifier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier_type', models.CharField(help_text='Record the identifier type in accordance with a controlled vocabulary maintained by the repository', max_length=128)),
                ('identifier_value', models.CharField(help_text='Record the other identifier value as received or generated by the repository', max_length=128)),
                ('identifier_note', models.TextField(help_text='Record any additional information that clarifies the purpose, use or generation of the identifier.', null=True)),
                ('metadata', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='identifiers', to='caais.metadata')),
            ],
        ),
        migrations.CreateModel(
            name='GeneralNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.TextField(blank=True, default='', help_text='To provide an open text element for repositories to record any relevant information not accommodated elsewhere in this standard.')),
                ('metadata', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='general_notes', to='caais.metadata')),
            ],
            options={
                'verbose_name': 'General Note',
                'verbose_name_plural': 'General Notes',
            },
        ),
        migrations.CreateModel(
            name='ExtentStatement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity_and_type_of_units', models.CharField(default='Not specified', help_text='Record the number and unit of measure expressing the quantity of the extent (e.g., 5 files, totalling 2.5MB)', max_length=256)),
                ('extent_note', models.TextField(blank=True, default='', help_text='Record additional information related to the number and type of units received, retained, or removed not otherwise recorded')),
                ('extent_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='extent_statements', to='caais.extenttype')),
                ('metadata', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='extent_statements', to='caais.metadata')),
            ],
            options={
                'verbose_name': 'Extent statement',
                'verbose_name_plural': 'Extent statements',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_date', models.DateTimeField(auto_now_add=True)),
                ('event_agent', models.CharField(help_text='Record the name of the staff member or application responsible for the event.', max_length=256)),
                ('event_note', models.TextField(blank=True, default='', help_text='Record any other information relevant to describing the event.')),
                ('event_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='event_type', to='caais.eventtype')),
                ('metadata', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='caais.metadata')),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
            },
        ),
        migrations.CreateModel(
            name='DateOfCreationOrRevision',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_date', models.DateTimeField(auto_now_add=True, help_text='Record the date on which the action (creation or revision) occurred.')),
                ('action_agent', models.CharField(default='', help_text='Record the name of the staff member who performed the action (creation or revision) on the accession record.', max_length=255)),
                ('action_note', models.TextField(blank=True, default='', help_text='Record any information summarizing actions applied to the accession record.')),
                ('action_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='action_type', to='caais.dateofcreationorrevisiontype')),
                ('metadata', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='date_creation_revisions', to='caais.metadata')),
            ],
            options={
                'verbose_name': 'Date of Creation or Revision',
                'verbose_name_plural': 'Dates of Creation or Revision',
            },
        ),
        migrations.CreateModel(
            name='ArchivalUnit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('archival_unit', models.TextField(help_text='Record the reference code and/or title of the archival unit to which the accession belongs.')),
                ('metadata', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='archival_units', to='caais.metadata')),
            ],
        ),
        migrations.RunPython(populate_initial_terms),
        migrations.RunPython(populate_extents),
        migrations.RunPython(populate_rights_types),
    ]
